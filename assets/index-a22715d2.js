import{cR as e,a,v as t,s as o,J as r,L as n,aF as s,o as m,f as l,m as i,y as d,l as p}from"./index-d32d699d.js";import{C as c}from"./index-d5b1635c.js";import"./index-80ea7d72.js";import"./index-cd646f4b.js";import{T as u}from"./index-428eee78.js";import"./index-da1a1de3.js";import"./index-e84e313c.js";import"./index-64da741e.js";import{u as y}from"./useECharts-8dd670ef.js";import"./index-42f6d054.js";import"./index-8e2feec8.js";import"./useRefs-b0536d84.js";import"./eagerComputed-b16e681c.js";import"./css-49036a2d.js";import"./fromPairs-c5e23fef.js";import"./iconUtil-b885d1ac.js";import"./index-22735145.js";import"./createForOfIteratorHelper-19a6e609.js";import"./scrollTo-7d931d9a.js";const x=a({components:{Table:u,Card:c},setup(){const a=t({heapMemory:{},nonHeapMemory:{},heapMemoryData:[],nonHeapMemoryData:[],gcDataList:[]}),n=o(null),{setOptions:s}=y(n),m=o(null),{setOptions:l}=y(m);return r((()=>{return t=this,o=null,r=function*(){const t=yield e.get({url:"/metrics/jvm/memory"});a.heapMemory=t.heapMemory,a.nonHeapMemory=t.nonHeapMemory;const o=Object.entries(t.heapMemory).map((([e,a])=>({name:e,value:a}))),r=Object.entries(t.nonHeapMemory).map((([e,a])=>({name:e,value:a})));a.heapMemoryData=o,a.nonHeapMemoryData=r,a.gcDataList=t.gcDataList.map((e=>({name:e.name,collectionCount:e.collectionCount,collectionTime:e.collectionTime}))),s({tooltip:{trigger:"item"},legend:{data:["堆内存使用情况"]},xAxis:{type:"category",data:a.heapMemoryData.map((e=>e.name))},yAxis:{type:"value",axisLabel:{formatter:"{value} MB"}},series:[{name:"堆内存使用情况",type:"bar",data:o.map((e=>parseFloat(e.value)))}]}),l({tooltip:{trigger:"item"},legend:{data:["非堆内存使用情况"]},xAxis:{type:"category",data:a.nonHeapMemoryData.map((e=>e.name))},yAxis:{type:"value",axisLabel:{formatter:"{value} MB"}},series:[{name:"非堆内存使用情况",type:"bar",data:r.map((e=>parseFloat(e.value)))}]})},new Promise(((e,a)=>{var n=e=>{try{m(r.next(e))}catch(t){a(t)}},s=e=>{try{m(r.throw(e))}catch(t){a(t)}},m=a=>a.done?e(a.value):Promise.resolve(a.value).then(n,s);m((r=r.apply(t,o)).next())}));var t,o,r})),{state:a,heapMemoryColumns:[{title:"指标",dataIndex:"name"},{title:"值",dataIndex:"value"}],nonHeapMemoryColumns:[{title:"指标",dataIndex:"name"},{title:"值",dataIndex:"value"}],gcDataColumns:[{title:"名称",dataIndex:"name"},{title:"垃圾回收次数",dataIndex:"collectionCount"},{title:"垃圾回收时间",dataIndex:"collectionTime"}],heapMemoryChart:n,nonHeapMemoryChart:m}}}),h={ref:"heapMemoryChart",style:{height:"300px"}},M={ref:"nonHeapMemoryChart",style:{height:"300px"}};const f=n(x,[["render",function(e,a,t,o,r,n){const c=s("Table"),u=s("Card");return m(),l("div",null,[i(u,{title:"堆内存使用情况"},{default:d((()=>[i(c,{columns:e.heapMemoryColumns,dataSource:e.state.heapMemoryData,bordered:""},null,8,["columns","dataSource"]),p("div",h,null,512)])),_:1}),i(u,{title:"非堆内存使用情况"},{default:d((()=>[i(c,{columns:e.nonHeapMemoryColumns,dataSource:e.state.nonHeapMemoryData,bordered:""},null,8,["columns","dataSource"]),p("div",M,null,512)])),_:1}),i(u,{title:"对象垃圾回收情况"},{default:d((()=>[i(c,{columns:e.gcDataColumns,dataSource:e.state.gcDataList,bordered:""},null,8,["columns","dataSource"])])),_:1})])}]]);export{f as default};
